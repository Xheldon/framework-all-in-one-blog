webpackJsonp([11],{296:function(s,e){s.exports='<h1 id="git-">git常用命令总结</h1>\n<p>date:   2016-04-21 22:13:35 +0800</p>\n<h3 id="-vcs-">分类: [VCS]</h3>\n<hr>\n<p>经常使用git，但是一直没时间写，现在终于有时间了，所以总结一下常用命令。</p>\n<p>新建一个分支并切换到这个分支：</p>\n<pre><code class="hljs javascript">git checkout -<span class="hljs-selector-tag">b</span> branch_name\n</code></pre>\n<p>切换分支:</p>\n<pre><code class="hljs javascript"><span class="hljs-attribute">git</span> checkout branch_name\n</code></pre>\n<p>删除一个分支(需要先<code>checkout</code>到另一个分支):</p>\n<pre><code class="hljs javascript"><span class="hljs-symbol">git</span> <span class="hljs-keyword">branch </span>-d <span class="hljs-keyword">branch_name</span>\n</code></pre>\n<p>注意，如果你在本地新建一个分支，而没有<code>git push</code>的话，执行下列命令删除一个分支会提示你</p>\n<pre><code class="hljs javascript"><span class="hljs-keyword">error: </span>The branch \'test\' is not fully merged.\nIf you are sure you want to delete it, run \'git branch -D test\'.\n</code></pre>\n<p>确定不要的话，按说明强制删除即可。</p>\n<p>提交文件的流程是:</p>\n<pre><code class="hljs javascript">git <span class="hljs-keyword">add</span> ==&gt; git commit ==&gt; git <span class="hljs-keyword">push</span>\n</code></pre>\n<p><code>git add</code>常用的有三个参数:</p>\n<ol>\n<li><code>git add -A</code> 所有变动记录都增加到暂存区，不管是新增还是删除还是修改。</li>\n<li><code>git add .</code> 文件的增加记录，修改添加到暂存区，不包括删除的文件。</li>\n<li><code>git add -u</code> 文件的删除和修改记录添加到暂存区，不包括新增的文件。</li>\n</ol>\n<p>人生没有后悔药，但是<code>git</code>有，如果不小心提交了错误的文件或者提交信息写错了，可以根据情况执行以下命令。</p>\n<p>首先<code>git status</code> 查看版本状态，(我用<code>zsh</code>)红色文件表示未<code>git add</code>到暂存区，绿色文件表示已经<code>git add</code>到缓存区，等待<code>git commit</code>。</p>\n<p>这个时候如果不想<code>git add</code>到缓存区的话，那就<code>git reset HEAD</code>全部将文件重新变为未<code>git add</code>的原始状态，如果只是不想<code>git add</code>某一个文件到缓存区的话, 需要指定文件名:</p>\n<pre><code class="hljs javascript">git <span class="hljs-keyword">reset</span> <span class="hljs-keyword">HEAD</span> filename\n</code></pre>\n<p>有时候不但不想把修改过的文件<code>git add</code>到缓存区，而且想把这个文件所做的修改都忽略掉，也即回复到未修改的状态，那重新检出即可:</p>\n<pre><code class="hljs javascript">git checkout <span class="hljs-comment">-- filename</span>\n</code></pre>\n<p>注意这里没有拼写错误,<code>checkout</code>和<code>filename</code>之间有左右存在一个空格的短横线。</p>\n<p><code>git add</code>之后就是<code>git commit</code>，可以跟一个参数<code>-m</code>来写下提交说明，这是个好习惯，而且是被强制的，如果没有<code>-m</code>参数，则会进入一个<code>vim</code>编辑状态，提示你加上信息:</p>\n<pre><code class="hljs javascript"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">\'这是一个提交说明\'</span>\n</code></pre>\n<p>这个时候发现提交说明写错了，不想<code>commit</code>了（此时<code>HEAD</code>已经变了），两个方法：</p>\n<p>一个是移除<code>commit</code>：（因为这个还没有<code>push</code>，只是<code>commit</code>到本地仓库）</p>\n<p>首先<code>git log</code>，记下你误<code>commit</code>之前的一个<code>commit id</code>，是一个<code>hash(SHA)</code>，如：<code>73cf3bfc3419a85e959d7ecfcb917d9cdc24b3c9</code>或者直接是最近的一次<code>push</code>的<code>HEAD</code>也行：</p>\n<pre><code class="hljs javascript">git reset <span class="hljs-number">73</span>cf<span class="hljs-number">3</span>bfc<span class="hljs-number">3419</span>a<span class="hljs-number">85e959</span>d<span class="hljs-number">7</span>ecfcb<span class="hljs-number">917</span>d<span class="hljs-number">9</span>cdc<span class="hljs-number">24</span>b<span class="hljs-number">3</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>\n</code></pre>\n<p>（这个时候不能像<code>git add</code>的时候使用<code>git reset HEAD</code>了因为<code>git commit</code>之后<code>HEAD</code>已经变了(即已经可以通过<code>git log</code>查看提交记录了)）</p>\n<p>这里插一句<code>git reset</code>命令的三个参数:<code>--mixed</code>,<code>--soft</code>,<code>--hard</code>:</p>\n<p>网上的教程一大堆，又是画图说明又是引用官方分支说明的，麻烦，我说的简单点。</p>\n<blockquote>\n<p>简单的，举例子的方式简单点。 ---Xheldon</p>\n</blockquote>\n<p><code>git reset</code>默认是<code>mixed</code>参数，即执行<code>git reset xxxx</code>（xxx表示一个<code>SHA</code>或者未<code>commit</code>的时候是<code>HEAD</code>） 即是执行<code>git reset --mixed xxxx</code>, 他的作用是将文件恢复到你修改过文件之后没有执行任何<code>git</code>命令的状态(文件是红色状态)。</p>\n<p><code>--soft</code>参数是将文件仅仅是恢复到未commit的状态，其文件还是<code>git add</code>过的（还是绿的）。</p>\n<p><code>--hard</code>就比较强势了，它会将你的文件彻底恢复到你指定的提交记录的状态，不管你是<code>add</code>过还是<code>commit</code>过还是修改过文件，统统无视。注意，执行<code>git reset --hard xxx</code>具有一定的危险性，会将你当前的修改从本机删除。</p>\n<p><code>git reset --hard xxx</code>之后，文件已经从本机删除了，你所有的修改也已经被删除，但是想找回<code>hard</code>删除的文件修改记录怎么办呢？使用<code>git reflog</code></p>\n<p>你的每一步<code>commit</code>和<code>reset</code>操作，<code>git</code>都会生成一个记录，这个记录可以在通过<code>git reflog</code>找到，在每个记录之前有个短<code>hash</code>，复制这个短<code>hash</code>，重新执行一遍<code>git reset --hard short_hash</code>即可。</p>\n<p>注意，执行<code>git commit</code>之后这个时候的<code>HEAD</code>已经变成你提交过的文件的更改状态，再执行<code>git reset --mixed HEAD</code>或者<code>git  reset --soft HEAD</code>无效（因为当前的<code>HEAD</code>就是你<code>commit</code>之后的那个点（即使你没有<code>push</code>）），如果想返回到<code>git add</code>之后，<code>git commit</code>之前的状态需要<code>git reset --soft commit_id</code>，如果返回到<code>git add</code>之前的状态，需要<code>git reset --mixed commit_id</code>， 或者直接<code>git reset commit_id</code>。 </p>\n<p><code>git commit</code>后悔药的另一牌子叫<code>--amend</code>，提交之后，后悔了，发现msg写错了，或者文件又修改了，不想再生成一条<code>commit</code>记录因为很丑而且显得你很菜，居然会犯这种提交信息写错的低级错误，那么运行：</p>\n<pre><code class="hljs javascript"><span class="hljs-string">git </span><span class="hljs-string">commit </span><span class="hljs-built_in">--amend</span> <span class="hljs-string">change_file_name_after_commit </span>-m <span class="hljs-string">"新的msg"</span>\n</code></pre>\n<p>即可。</p>\n<p>后悔药吃过了，<code>git commit</code>之后确认无误就可以<code>git push</code>了。这个时候如果你当前分支所分出来的远程分支没有其他人提交更新的话，你就可以使用<code>fast forward</code> 模式，中文翻译成快进模式，直接合并进去。形象的查看合并情况可以使用：</p>\n<pre><code class="hljs javascript">git <span class="hljs-built_in">log</span> <span class="hljs-comment">--graph --pretty=oneline</span>\n</code></pre>\n<p>如果在你分出分支期间，还有其他人也提交了分支，如果没有冲突的话那也可以直接合并，需要你先<code>git pull</code>下来，再执行<code>git push</code>。\n如果有冲突的话这个时候会提示你别人的修改和你的修改有什么冲突，这个就需要你手动解决，解决完之后就<code>git add</code>, <code>git commit</code>即可。</p>\n<p>合并分支：</p>\n<pre><code class="hljs javascript">git <span class="hljs-keyword">merge</span> another_branch_name\n</code></pre>\n<p>这里的情况是<code>非fast forward</code>模式，即B从A分支上分出后，作为父分支的A分支又改变了，B分支这个时候也改了点东西，再想合并回A分支的时候，就出现了现在的情况以下情况：\n注意，假设你在A分支上，需要<code>merge</code>的是B分支，则<code>merg</code>过来的B分支必须是<code>git push</code>过的，如果B分支只<code>git commit</code>的分只是不会被merge的。因为<code>git merge branch_name</code>的<code>branch_name</code>是从<code>branch_name</code>的远程<code>origin</code>来<code>merge</code>的，<code>commit</code>只修改了本地的<code>HEAD</code>，没有<code>push</code>就没有修改远程<code>origin</code>。\n假设B分支已经<code>git push</code>了自己的改动到远程，而本地A也<code>git add</code>了自己的改动到本地仓库，则在A分支上执行<code>git merge B</code>的时候会出现(假设改动的是<code>config.js</code>):</p>\n<pre><code class="hljs javascript">Updating 474cfbf..9c94d0c\n<span class="hljs-keyword">error: </span>Your local changes to the following files would be overwritten by merge:config.js\nPlease commit your changes or stash them before you merge.\nAborting\n</code></pre>\n<p>意思就是合并两个分支的时候出错中断。会让你先暂存你的当前分支的修改即<code>git stash</code>或者提交你的修改即<code>git commit</code>。 之后<code>git merge</code>之后，出现冲突再手动修改，重新提交。\nOK，我们先<code>git commit</code>当前的修改，再次执行<code>git merge B</code>，这个时候出现（假设冲突文件是<code>config.js</code>）：</p>\n<pre><code class="hljs javascript">Auto-merging config.js\nCONFLICT (content): <span class="hljs-keyword">Merge</span> conflict <span class="hljs-keyword">in</span> config.js\n<span class="hljs-keyword">Automatic</span> <span class="hljs-keyword">merge</span> <span class="hljs-keyword">failed</span>; fix conflicts and then <span class="hljs-keyword">commit</span> the result.\n</code></pre>\n<p>手动解决之后,再重新<code>git add</code>，<code>git commit</code>即可。</p>\n<p>注意，如果你在一个分支上修改了文件，而在<code>checkout</code>到另一个分支的时候没有发生冲突，则不会有任何提示，文件改动依然存在，因此你可以将文件在一个分支上改动后，再提交到另一个分支上。而如果在一个分支上改动文件之后，再<code>checkout</code>其他分支出现冲突的话(比如其他分支<code>git pull</code>了，或者其他分支<code>git commit</code>了相同文件的相同修改):</p>\n<pre><code class="hljs javascript"><span class="hljs-keyword">error: </span>Your local changes to the following files would be overwritten by checkout:\n    config.js\nPlease commit your changes or stash them before you switch branches.\nAborting\n</code></pre>\n<p>这个时候就需要你先<code>git stash</code>储藏（此<code>stash储藏</code>不是<code>git add暂存</code>，<code>stash</code>是先将文件放到一个特定的区域，等到切换完分支之后，再像一个补丁一样，应用这个<code>stash</code>到切换到的<code>checkout</code>分支，或者不应用<code>stash</code>，等切换的分上的事情做完之后，再切换回来的时候，再次应用这个<code>stash</code>，当然如果你一直不想应用你的<code>stash</code>也可以一直不应用，没有关系）.\n这里说到了<code>git stash</code>，这个命令的使用场景是同时需要做两个分支的修改的时候，其中一个分支做到了一半，这个时候另一个分支也需要修改，你不可能把已经做一半的内容丢弃，又不能<code>commit</code>，因为这有可能在<code>checkout</code>过去的会造成<code>conflict</code>，因此你需要储藏<code>stash</code>：\n先查看当前状态，<code>git status</code>：</p>\n<pre><code class="hljs javascript">On branch <span class="hljs-keyword">optimize</span>\nYour branch <span class="hljs-keyword">is</span> up-<span class="hljs-keyword">to</span>-<span class="hljs-built_in">date</span> <span class="hljs-keyword">with</span> <span class="hljs-string">\'origin/optimize\'</span>.\nChanges <span class="hljs-keyword">not</span> staged <span class="hljs-keyword">for</span> <span class="hljs-keyword">commit</span>:\n  (<span class="hljs-keyword">use</span> <span class="hljs-string">"git add &lt;file&gt;..."</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will be committed)\n  (<span class="hljs-keyword">use</span> <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> <span class="hljs-keyword">to</span> discard changes <span class="hljs-keyword">in</span> working <span class="hljs-keyword">directory</span>)\n\n    modified:   config.js\n\n<span class="hljs-keyword">no</span> changes added <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span> (<span class="hljs-keyword">use</span> <span class="hljs-string">"git add"</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">"git commit -a"</span>)\n</code></pre>\n<p>储存一下,<code>git stash</code>:</p>\n<pre><code class="hljs javascript">Saved working directory and index state WIP on <span class="hljs-keyword">optimize</span>: <span class="hljs-number">24</span>bf0e1 <span class="hljs-keyword">test</span> <span class="hljs-keyword">add</span>\n<span class="hljs-keyword">HEAD</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">now</span> <span class="hljs-keyword">at</span> <span class="hljs-number">24</span>bf0e1 这是一个提交\n</code></pre>\n<p>之后再<code>git status</code>看下:</p>\n<pre><code class="hljs javascript">On branch <span class="hljs-keyword">optimize</span>\nYour branch <span class="hljs-keyword">is</span> up-<span class="hljs-keyword">to</span>-<span class="hljs-built_in">date</span> <span class="hljs-keyword">with</span> <span class="hljs-string">\'origin/optimize\'</span>.\n<span class="hljs-keyword">nothing</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span>, working tree clean \n</code></pre>\n<p>这个时候可以放心的切换到其他分支，这里要说明的是，切换到其他分支的时候你也可以使用储藏的分支到当前分支（只要你不怕冲突），查看储藏列表,<code>git stash list</code>:</p>\n<pre><code class="hljs javascript">stash@{<span class="hljs-number">0</span>}: WIP <span class="hljs-keyword">on</span> optimize: <span class="hljs-number">24</span>bf0e1 test add\n</code></pre>\n<p>这是刚刚<code>stash</code>起来的改动，可以使用<code>git stash apply</code>应用这个最近的改动，如果<code>stash</code>的改动有好几个，那就指定<code>stash</code>的名字:</p>\n<pre><code class="hljs javascript">git stash <span class="hljs-built_in">apply</span> stash@{<span class="hljs-number">0</span>}\n</code></pre>\n<p>应用之后就会从储存区删除这个<code>stash</code>，如果不希望的删除的话就：</p>\n<pre><code class="hljs javascript">git stash apply stash_name <span class="hljs-comment">--index</span>\n</code></pre>\n<p>之后再希望删除的话就：</p>\n<pre><code class="hljs javascript">git stash <span class="hljs-built_in">drop</span> stash_name\n</code></pre>\n<p>以上两个命令不带<code>stash_name</code>的话默认删除最近的一个<code>stash</code>。</p>\n<p>暂时能想到的就这么多吧，如果不熟悉，还是用<code>Sourcetree</code>吧。</p>\n<h2 id="-">更新</h2>\n<p><code>git revert/reset/rebase</code> 只看说明是搞不懂的, 需要你自己输入命令测试一下. </p>\n<p>我就喜欢为了干净整洁的提交历史而视同 <code>git rebase</code>, 但是这个命令很危险, 有一些使用场景需要注意. 而比 <code>git rebase</code> 更危险的是 <code>git reset</code>, 它会把当前项目重置到某一次提交. 而 <code>git revert</code> 就相对安全一些, 但是你想 <code>revert</code> 之前的某个提交最好需要保证你的缓存区是空的, 否则会遇到错误提示. </p>\n<p>当然, <code>git</code> 命令千千万(夸张), 有一些命令是针对一些特殊场景的, 在没遇到之前可能无法理解其中的一些用法, 这个很正常.</p>\n<p>比如 <code>git reset commitId</code> 即是把 <code>HEAD</code> 移动到 <code>commitId</code> 所在的地方, 你可能一头雾水, 移动 <code>HEAD</code> 有什么用? 这个命令的目的是什么? 再比如 <code>git revert commitId</code> 是把 <code>commitId</code> 的提交给移除, 而不移动 <code>HEAD</code> 的指针. </p>\n<p>看代码(<code>d0b9def</code> 对应 <code>commit -m &#39;reset/revert test 3&#39;</code> 这个提交, 当前 <code>HEAD</code> 在 <code>&#39;reset/revert test 4&#39;</code>上): </p>\n<p><code>git revert d0b9def</code> 之后, 你的代码可能是这个样子的:</p>\n<pre><code class="hljs javascript"><span class="hljs-keyword">reset</span>/revert <span class="hljs-keyword">test</span> <span class="hljs-number">1</span>\n<span class="hljs-keyword">reset</span>/revert <span class="hljs-keyword">test</span> <span class="hljs-number">2</span>\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="hljs-keyword">HEAD</span>\n<span class="hljs-keyword">reset</span>/revert <span class="hljs-keyword">test</span> <span class="hljs-number">3</span>\n<span class="hljs-keyword">reset</span>/revert <span class="hljs-keyword">test</span> <span class="hljs-number">4</span>\n=======\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="hljs-keyword">parent</span> <span class="hljs-keyword">of</span> d0b9def... <span class="hljs-keyword">reset</span>/revert <span class="hljs-keyword">test</span>\n</code></pre>\n<p>在相同的 <code>HEAD</code> 上执行 <code>git reset d0b9def</code> 之后, 你的工作区可能是这个样子的:</p>\n<pre><code class="hljs javascript"> <span class="hljs-built_in">reset</span>/<span class="hljs-built_in">revert</span> test <span class="hljs-number">1</span>\n <span class="hljs-built_in">reset</span>/<span class="hljs-built_in">revert</span> test <span class="hljs-number">2</span>\n <span class="hljs-built_in">reset</span>/<span class="hljs-built_in">revert</span> test <span class="hljs-number">3</span>\n+<span class="hljs-built_in">reset</span>/<span class="hljs-built_in">revert</span> test <span class="hljs-number">4</span>\n</code></pre>\n<p>看出移动不移动 <code>HEAD</code> 的区别了吧? <code>revert</code> 一定会让你手动解决冲突, 因为其保留的是从你 <code>commitId</code> 之前的一个父 <code>commit</code> 到当前 <code>HEAD</code> 的除了 <code>d0b9def</code> 的所有变动. 而 <code>reset</code> 不会让你解决冲突, 而是默默的移动 <code>HEAD</code> 把自 <code>d0b9def</code> 以来所有的变动都显示为文件改动, 需要你手动 <code>git add/commit</code> 一下, 当然少不了 <code>push --force</code>.</p>\n<p>因此, <code>revert</code> 被设计为撤销<code>公开</code>的提交的安全方式，<code>reset</code> 被设计为重设<code>本地</code>更改。因为两个命令的目的不同，它们的实现也不一样：重设完全地移除了一堆更改，而撤销保留了原来的更改，用一个新的提交来实现撤销。</p>\n'}});