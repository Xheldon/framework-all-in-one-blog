webpackJsonp([13],{294:function(s,e){s.exports='<h1 id="-js-sdk-api-">新浪微博JS SDK API的使用</h1>\n<p>date:   2015-12-21 21:23:45 +0800</p>\n<h3 id="-javascript-">分类: [Javascript]</h3>\n<hr>\n<p>以前整个网站都是老大一个人怼起来的,各种bug和各种细节不完善.所以打算重构一下,侯哥搭好了<code>seajs</code>的开发框架,因此我只需要写前端逻辑即可.</p>\n<p>注册和登陆部分是我写的,因此我打算增加个新浪微博和QQ登陆的功能,用户点击之后存储其id到数据库,当然这个需要修改数据库表字段,单独增加一个类似于<code>wb_id</code>的字段名来标示.</p>\n<p>现在流行的做法有两种,一个是用新浪微博(或其他登录方式,下同)登陆之后,后台自动创建一个id作为本站唯一的标示,同一行的wb_id存储此用户的微博id,以后用任意账号登陆即可,第一次微博登陆之后用户只需要设置一下昵称(非必须,可直接使用微博昵称)和密码(必须,因为万一以后新浪微博倒闭了,用户没法儿登陆可不行);另一种方式是新浪微博登陆之后需要引导用户手动创建一个账号和密码,或者引导用户绑定到已经注册过的用户账号上去.</p>\n<p>好了以上是业务逻辑,我会使用第一种方式实现,下面是具体的实现方法:如何使用新浪微博的JSSDK的API.\n首先和网上大多数教程里面说的那样,需要了解OAuth2.0协议的原理,其实不了解也没关系,知道流程就行,OAuth2.0验证流程网上说的很多了,百度一大把,这里就不再赘述了.</p>\n<p>注意:所有步骤的前提是,你已经取得了新浪微博开放平台的开发者权限,如果没有的话是无权调用API的,关于新浪微博开发者申请,请自行百度.申请完新浪微博开发者之后会到一个appid,这个是新浪识别谁调用了它的API的关键id,之后的步骤也会用到.</p>\n<p>第一步:增加命名空间,引用jssdk文件.</p>\n<p>增加命名空间:</p>\n<pre><code>&lt;html <span class="hljs-string">xmlns:</span>wb=”<span class="hljs-string">http:</span><span class="hljs-comment">//open.weibo.com/wb”&gt;</span>\n</code></pre><p>引用jssdk文件:</p>\n<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”http://tjs.sjs.sinajs.cn/open/api/js/wb.js?appkey</span>=<span class="hljs-string">YOUR</span> <span class="hljs-attr">APPKEYdebug</span>=<span class="hljs-string">true”</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/javascript”</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">”utf-8″</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n</code></pre>\n<p>其中的<code>YOUR APPKEY</code>替换为你申请新浪微博开发者时它给你的<code>appid</code>, <code>debug=true</code>方便你调试,正式上线时可以把<code>&amp;debug=true</code>这个给删掉.</p>\n<p>第二步:使用API授权登录</p>\n<p>这里有两种方式,一种是点击按钮之后直接在脚本里调用API的<code>WB2.login()</code>方法具体请看新浪API,</p>\n<p>还一种是将用户引导到包含你appid和回调地址的地址中去(姑且叫它授权页),格式为:</p>\n<pre><code>http<span class="hljs-variable">s:</span>//api.weibo.<span class="hljs-keyword">com</span>/<span class="hljs-number">2</span>/oauth2/authorize?client_id=YOUR APPKEY&amp;response_type=token&amp;<span class="hljs-keyword">display</span>=js&amp;transport=html5&amp;referer=Your_CallBack_Address\n</code></pre><p>其中的<code>YOUR APPKEY</code>和<code>Your_CallBack_Address</code>替换为你自己的,注意<code>Your_CallBack_Address</code>记得加上<code>http://</code>\n比如我的测试引导地址就是:</p>\n<pre><code>https:<span class="hljs-regexp">//</span>api.weibo.com<span class="hljs-regexp">/2/</span>oauth2<span class="hljs-regexp">/authorize?client_id=2177891434&amp;response_type=token&amp;display=js&amp;transport=html5&amp;referer=http:/</span><span class="hljs-regexp">/www.xheldon.com/g</span>btagsLogin.html\n</code></pre><p>注意:貌似这个回调地址必须是以php/html/jsp等动态/非动态的带后缀名的格式,如果是首页的话比如<code>http://xheldon.com</code>是不行的,需要加上<code>http://xheldon.com/index.html</code>(因为我的后台是Node的)才行,这个我没有试过,有需要的同学请自行尝试.</p>\n<p>第一种方法的表现形式是点击引导入口之后会直接弹出微博登陆授权页面的对话框,这个时候如果你用过的是<code>chrome</code>的话会发现在这个小窗口的地址栏左侧的地址有个小锁icon,代表这个地址是锁定的无法修改.\n在弹出的小窗口输入微博登陆账号密码授权之后对话框消失,原来的页面刷新,第三方网站就可以操作你的账号.</p>\n<p>第二种方法是不在脚本中使用<code>WB2.login()</code>,而是引导用户到刚才我说的那个包含appid和回调地址的地址中去,这个地址也是会让你输入账号密码,但是这个和第一种方式的区别是这个是会离开现有的页面跳转到这个授权页中去的,输入账号密码授权之后会回到你这个链接中写的回调地址中去.</p>\n<p>以上两步的原理其实就是<code>OAuth2.0</code>协议认证的过程,只是JSSDK给你处理好了第一次请求返回的code和第二次请求返回的<code>access token</code>,因此你不需要按照官方API里面说的那样运用<code>basic</code>方式将<code>access token</code>放到<code>header</code>中使用post或者get方式等一系列你可能听不懂的名词,而只需要关注前端的逻辑,使用获得的json格式的数据即可.</p>\n<p>还是刚才那个地址,<a href="http://open.weibo.com/wiki/Weibo-JS_V2" target="_blank" rel="nofollow">微博API入口级文档说明</a>.当然”入口级”这个名词 是我自创的,你知道了这五个的用法,以后的API就可以依葫芦画瓢了.</p>\n<p>这几个API其中的<code>WB2.login()</code> 和<code>WB2.checklogin()</code>以及<code>WB2.logout</code>比较简单,是个人都能看懂,看不懂的按照我刚才说的那个<code>WB2.login()</code>方法往script标签里面一放就可以了,只是引导登陆之后你什么也没有做.</p>\n<p>登陆之后想做点什么的话(这是废话,不做什么你让人家登陆干啥),比如获取登陆新浪微博登陆用户的id,获取它的粉丝数等等,都是通过这五个入口级API的最重要的一个API\n即与微博API进行数据交互及采用Js方式调用内置微博组件的入口函数(官方是这么介绍的):<code>WB2.anyWhere(callback)</code>,</p>\n<p>然后与数据交互的话需要使用<code>W.parseCMD(uri, callback, args, opts)</code>\n其中W形参是<code>WB2.anyWhere(callback)</code>传进去的,如果想调用微博组件的话,可以使用<code>W.widget.hoverCard(…)</code>或者<code>W.widget.followButton(…);</code>等等.</p>\n<p>注意,最最重要的一步,即是你和新浪的数据交互的一步:</p>\n<p>一般<code>W.parseCMD</code>的用法是以下形式:</p>\n<pre><code class="hljs javascript"><span class="hljs-selector-tag">W</span><span class="hljs-selector-class">.parseCMD</span>(<span class="hljs-string">\'/users/show.json\'</span>, function(oResult, bStatus) {\n  <span class="hljs-selector-tag">if</span>(bStatus) {\n  <span class="hljs-comment">//to do something...</span>\n  }\n  }, {\n    <span class="hljs-attribute">screen_name </span>: <span class="hljs-string">\'姚晨\'</span>\n  }, {\n    <span class="hljs-attribute">method </span>: <span class="hljs-string">\'get\'</span>,\n    <span class="hljs-attribute">cache_time </span>: <span class="hljs-number">30</span>\n  });\n</code></pre>\n<p>其中<code>W.parseCMD()</code>的第一个参数<code>/user/show.json</code>可以换成其他的接口如:<code>/statuses/user_timeline.json</code>就可以读取这个借口的信息了,具体有哪些接口,而接口又能返回哪些数据,新浪自己给了个<a href="http://open.weibo.com/tools/apitest.php" target="_blank" rel="nofollow">微博API测试工具</a>注意:这个API测试工具的登陆界面有问题,请不要在这个页面登陆,而是先到微博首页登陆之后再在这个API测试工具的页面刷新即可.\n那个<code>screen_name</code>不是必须的,但是<code>screen_name</code>所在的{}必须保留,即使它是空的.</p>\n<p>下面的<code>method: get</code>是与后台交互时的参数,有时候的交互是需要使用<code>post</code>方式,<code>cache_time</code>看名字也知道什么意思吧?就不多说了.</p>\n<p>差不多需要注意的就这么多.</p>\n'}});